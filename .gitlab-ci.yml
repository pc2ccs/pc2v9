# GitLab build configuration
# this image includes openjdk-8-jdk, hugo, ant, curl, jq, httpie
image: pc2fromecs/jdk8hugo

before_script:
  - echo "Running (empty) before_script cleanup..."

after_script:
  - echo "Running (empty) after_script cleanup..."

# Define the stages to which jobs can be assigned.
# The order of stages in this parameter defines the order of execution: all jobs of the same stage are run in parallel;
#  jobs of the next stage are run after successful completion of jobs from previous stages.
# If all jobs of all stages the commit is marked with status "passed".
# Jobs that don't specify a stage are assigned to the "test" stage.
stages:
  - build
  # currently done in build stage, commenting to speed up pipeline
  #  - test
  - deploy
  - website

# TODO re-organize package.xml (along with build.xml) into building, testing, packaging.

# TODO figure out how to restrict the build/test/deploy to the current branch
# ANSEWR: use only,  but really there should be different deploy steps
#   for master (or maybe tags?) vs the other branches

job-build:
  stage: build
  script:
    - echo "Running ant on package.xml"
    - ant -file package.xml
    - echo $CI_JOB_ID > dist/ci_job_id.txt
  artifacts:
    paths:
    - dist/*.zip
    - dist/*.jar
    - dist/*.txt
    - dist/*.gz
    expire_in: 1 month

# job-test:
#   stage: test
#   script:
#     - echo "Running test stage..."
#     - echo "Do a test here!"

push to ECS at CSUS:
  stage: deploy
  script:
    - echo "Running deploy stage"
    - export BUILDNUMBER=`echo dist/pc2-*.zip | sed 's#^dist.*build-\([0-9]*\)[.~].*#\1#'`
    - BUILD_JOB_ID=$(cat dist/ci_job_id.txt)
    - curl "http://pc2.ecs.csus.edu/cgi-bin/grabgitlabartifacts.cgi?authkey=$AUTHKEY&url=https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/jobs/$BUILD_JOB_ID/artifacts&buildnumber=$BUILDNUMBER"


push release to GitHub:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: always
    - when: never
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    - git config --global user.email "pc2@troyspaws.com"
    - git config --global user.name "PC2 bot"
  script:
    - VERSION=`echo dist/pc2-*.zip | sed 's#^dist.*pc2-\(.*\).zip*#\1#'`
    - mkdir ~/builds
    - cd ~/builds
    - git clone git@github.com:pc2ccs/builds.git .
    # a commit is needed to associate to a release
    - git commit --allow-empty -m "Add build $VERSION"
    - git push
    - RELEASE_COMMIT=$(git rev-parse HEAD)
    # create the release
    - |
      http --ignore-stdin POST \
        https://api.github.com/repos/pc2ccs/builds/releases \
        "Authorization: token $GITHUB_TOKEN" \
        "Accept: application/vnd.github.v3+json" \
        tag_name=v$VERSION \
        target_commitish=$RELEASE_COMMIT \
        name=v$VERSION \
        prerelease:=true | tee ~/new-release.txt
    - RELEASE_ID=$(cat ~/new-release.txt | jq .id)
    - RELEASE_ASSET_UPLOAD_URL=https://uploads.github.com/repos/pc2ccs/builds/releases/${RELEASE_ID}/assets
    - cd $CI_PROJECT_DIR/dist
    - echo "Uploading release $VERSION"
    - |
      for archive in *.zip *.gz
      do
        echo $archive...
        case "$archive" in
          *.zip)
            cat $archive | http --timeout 300 POST ${RELEASE_ASSET_UPLOAD_URL}\?name=$archive \
              "Authorization: token $GITHUB_TOKEN" \
              'Accept: application/vnd.github.v3+json' \
              'Content-Type: application/zip' | jq .state
            ;;
            *.tar.gz)
              cat $archive | http --timeout 300 POST ${RELEASE_ASSET_UPLOAD_URL}\?name=$archive \
                "Authorization: token $GITHUB_TOKEN" \
                'Accept: application/vnd.github.v3+json' \
                'Content-Type: application/gzip' | jq .state
            ;;
        esac
        if [ -f $archive.sha256.txt ]; then
          echo $archive.sha256.txt...
          cat $archive.sha256.txt | http POST ${RELEASE_ASSET_UPLOAD_URL}\?name=$archive.sha256.txt \
            "Authorization: token $GITHUB_TOKEN" \
            'Accept: application/vnd.github.v3+json' \
            'Content-Type: text/plain' | jq .state
          echo $archive.sha512.txt...
          cat $archive.sha512.txt | http POST ${RELEASE_ASSET_UPLOAD_URL}\?name=$archive.sha512.txt \
            "Authorization: token $GITHUB_TOKEN" \
            'Accept: application/vnd.github.v3+json' \
            'Content-Type: text/plain' | jq .state
          fi
      done

push nightly to GitHub:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_REF_NAME == "develop"'
      when: always
    - when: never
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    - git config --global user.email "pc2@troyspaws.com"
    - git config --global user.name "PC2 bot"
  script:
    - VERSION=`echo dist/pc2-*.zip | sed 's#^dist.*pc2-\(.*\).zip*#\1#'`
    - TAG_NAME=`echo $VERSION |cut -d~ -f1`
    - mkdir ~/builds
    - cd ~/builds
    - git clone git@github.com:pc2ccs/nightly-builds.git .
    # a commit is needed to associate to a release
    - git commit --allow-empty -m "Add build $VERSION"
    - git push
    - RELEASE_COMMIT=$(git rev-parse HEAD)
    # create the release
    - |
      http --ignore-stdin POST \
        https://api.github.com/repos/pc2ccs/nightly-builds/releases \
        "Authorization: token $GITHUB_TOKEN" \
        "Accept: application/vnd.github.v3+json" \
        tag_name=v$TAG_NAME \
        target_commitish=$RELEASE_COMMIT \
        name=v$VERSION \
        prerelease:=true | tee ~/new-release.txt
    - RELEASE_ID=$(cat ~/new-release.txt | jq .id)
    - RELEASE_ASSET_UPLOAD_URL=https://uploads.github.com/repos/pc2ccs/nightly-builds/releases/${RELEASE_ID}/assets
    - cd $CI_PROJECT_DIR/dist
    - echo "Uploading release $VERSION"
    - |
      for archive in *.zip *.gz
      do
        echo $archive...
        case "$archive" in
          *.zip)
            cat $archive | http --timeout 300 POST ${RELEASE_ASSET_UPLOAD_URL}\?name=$archive \
              "Authorization: token $GITHUB_TOKEN" \
              'Accept: application/vnd.github.v3+json' \
              'Content-Type: application/zip' | jq .state
            ;;
            *.gz)
              cat $archive | http --timeout 300 POST ${RELEASE_ASSET_UPLOAD_URL}\?name=$archive \
                "Authorization: token $GITHUB_TOKEN" \
                'Accept: application/vnd.github.v3+json' \
                'Content-Type: application/gzip' | jq .state
            ;;
        esac
        if [ -f $archive.sha256.txt ]; then
          echo $archive.sha256.txt...
          cat $archive.sha256.txt | http POST ${RELEASE_ASSET_UPLOAD_URL}\?name=$archive.sha256.txt \
            "Authorization: token $GITHUB_TOKEN" \
            'Accept: application/vnd.github.v3+json' \
            'Content-Type: text/plain' | jq .state
          echo $archive.sha512.txt...
          cat $archive.sha512.txt | http POST ${RELEASE_ASSET_UPLOAD_URL}\?name=$archive.sha512.txt \
            "Authorization: token $GITHUB_TOKEN" \
            'Accept: application/vnd.github.v3+json' \
            'Content-Type: text/plain' | jq .state
        fi
      done

update website:
  stage: website
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: always
    - if: '$CI_COMMIT_REF_NAME == "develop"'
      when: always
    - when: never
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    - git config --global user.email "pc2@troyspaws.com"
    - git config --global user.name "PC2 bot"
  script:
    - website/scripts/populate-releases.py
    - mkdir ~/website
    - git clone git@github.com:pc2ccs/pc2ccs.github.io.git ~/website
    - ln -s ~/website $CI_PROJECT_DIR/website/public
    - cd $CI_PROJECT_DIR/website
    - hugo
    - cd ~/website
    - sed -i -e 's/&amp;/\&/' index.html current/index.html all-builds/index.html previous/index.html history/index.html permission/index.html
    - git add .
    - git commit --allow-empty -m "Update website for pc2v9 commit $CI_COMMIT_SHA"
    - git push

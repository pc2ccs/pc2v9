# problem.yaml

# README: The main thing you need to do here is put your name after the
# "author" field. You probably don't need to change anything else, but please
# have a look in case you require things like floating-point output,
# alternative validation software, etc.

# Author of the problem (default: empty string)
# author:

# Where the problem was first used (default: empty string)
source: 2016 Greater New York Region ACM Regional Contest
source_url: http://acmgnyr.org/year2016/problems.shtml

# Who owns the rights to the problem (default: value of author, or
# value of source if no author given)
# rights_owner:

# License (optional, default "unknown", see below for list of possible values)
# You can choose another license if you wish (see below for options).
license: educational

# Some keywords describing the problem (default: empty)
# keywords:

# You don't need to change the validation or validator_flags unless:
# 1. The problem requires floating-point output (in which case you should use
#    float_tolerance and similar; see below).
# 2. The problem requires a specialized validator (e.g. in a problem where
#    multiple correct outputs are possible, but the goal is just to verify that
#    one of them is given). In this case you must write your own validation
#    program.
# 3. The problem requires exact matching, including whitespace (this is not common
#    and should only be used when the point of the problem is producing some
#    exact output).

# Configuration of output validator (optional), used to configure how
# output is validated.  For instance (see below for explanation):
validation: custom interactive
#  validator_flags: float_tolerance 1e-4

########################################
# You probably don't need to change anything below this line. However, see
# below for a description of all fields.
########################################

# Configuration of limits (defaults as indicated)

#limits:
#  time_multiplier: 5
#  time_safety_margin: 2
#  memory: 1024                   # MB
#  output: 8                      # MB
#  compilation_time: 60           # seconds
#  validation_time: 60            # seconds
#  validation_memory: 1024        # MB
#  validation_output: 8           # MB


############################################################################
# POSSIBLE VALUES FOR LICENSE:
#
# "unknown"				The default value. In practice means that the
#               		problem can not be used. 	
# "public domain"		There are no known copyrights on the problem, 
# 		   				anywhere in the world. 
#						http://creativecommons.org/about/pdm
# "cc0" 				CC0, "no rights reserved"
# 						http://creativecommons.org/about/cc0
# "cc by"				CC attribution
# 	  					http://creativecommons.org/licenses/by/3.0/
# "cc by-sa"			CC attribution, share alike
# 	  					http://creativecommons.org/licenses/by-sa/3.0/
# "educational"			May be freely used for educational purposes
# "permission" 			Used with permission. The author must be contacted
# 						for every additional use. 
############################################################################


############################################################################
# OUTPUT VALIDATOR OPTIONS
#
# There is a relatively versatile default validator available that is
# sufficient for most problems.  If the problem needs a custom output
# validator, the validation field should be set to "custom".  The
# validator_flags field is just a list of command line arguments that
# are passed on to the validator program used (whether it be the
# default validator or a custom validator).
# ###########################################################################


############################################################################
# DESCRIPTION OF DEFAULT VALIDATOR OPTIONS
#
# The default validator is essentially a beefed-up diff. In its default
# mode, it tokenizes the two files and compares token by token. It
# supports the following command-line arguments to control how tokens
# are compared.
#
#  o case_sensitive
#       indicates that comparisons should be case-sensitive
#  o space_change_sensitive
#       indicates that changes in the amount of whitespace should
#       be rejected (the de- fault is that any sequence of 1 or more
#       whitespace characters are equivalent).
#  o float_relative_tolerance eps
#       indicates that floating-point tokens should be accepted if
#       they are within relative error <= eps
#  o float_absolute_tolerance eps
#       indicates that floating-point tokens should be accepted if
#       they are within absolute error <= eps
#  o float_tolerance eps
#       short-hand for applying eps as both relative and absolute
#       tolerance.
#
# Note that when supplying both a relative and an absolute tolerance,
# the semantics are that a token is accepted if it is within either of
# the two tolerances.
#
# When a floating-point tolerance has been set, any valid formatting
# of floating point numbers is accepted for floating point tokens. So
# for instance if a token in the answer file says 0.0314, a token of
# 3.14000000e-2 in the output file would be accepted (but note that
# this applies *only* to floating point tokens, so "2.0e2" would *not*
# be a correct output if the answer file says "200"). If no floating
# point tolerance has been set, floating point tokens are treated just
# like any other token and has to match exactly.
############################################################################

sandbox-type: PC2_INTERNAL_SANDBOX

limits:
  time_multiplier: 1.0
  memory: 2048
  timeout: 5

validator:
  validatorProg: 'amazing_MK/validate_amazing_out'
  validatorCmd: '{:validator} {:infile} {:ansfile} {:feedbackdir}'
  usingInternal: false
  validatorOption: 0
  use-internal-validator: false
  use-clics-validator: false
  use-custom-validator: true
  use-clics-custom-validator-interface: true
